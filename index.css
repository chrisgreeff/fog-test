/* index.css */
/* BASE STYLES */
html,
body {
  padding: 0;
  margin: 0;
  font-family: 'Helvetica Neue';
  -webkit-font-smoothing: antialiased;
  color: #FFFFFF;
}

/* COMPONENTS */

/* Header */
/* I tend to prefix my classnames with something that is fairly unique to the project. I do this as habit so it is less of a
headache when introducing thirdparty components with their own stylesheets, and having to manage conflicts in classnames. */
.ft-header {
  position: absolute;
  top: 70px;
  left: 0;
  width: 100%;
  padding: 0 30px;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 70px;
  box-sizing: border-box;
  background-color: rgba(0, 0, 0, 0.2);
  font-size: 12px;
  z-index: 1;
}

/* I use `--` as a modifier for a SMACCS module. So I am able to add this class to the root element of the module, and it will
update the properties necessary. This allows me to reuse the `.ft-header` class multiple times without re-writing all the rules
for another element that is basically exactly the same. */
.ft-header--black {
  position: static;
  background-color: #000000;
}

.ft-header-nav {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.ft-header-nav-link {
  font-size: 14px;
  font-weight: bold;
  text-transform: uppercase;
  color: #FFFFFF;
  opacity: 0.5;
  text-decoration: none;
}

.ft-header-nav-link:hover { opacity: 1; }

/* Section */
.ft-section {
  padding: 20px 30px;
  box-sizing: border-box;
}

.ft-section--hero {
  display: flex;
  align-items: center;
  justify-content: start;
  position: relative;
  background: url('assets/banner.jpg') no-repeat center center;
  background-size: cover;
  height: 520px;
}

.ft-section--hero:before,
.ft-section--hero:after {
  position: absolute;
  width: calc(50% - 20px);
  bottom: 0;
  border-bottom: 20px solid white;
  display: block;
  content: " ";
}

.ft-section--hero:before {
  left: 0;
  border-right: 20px solid transparent;
}

.ft-section--hero:after {
  right: 0;
  border-left: 20px solid transparent;
}

.ft-section--hero .ft-section-content { max-width: 500px; }

.ft-section-content {
  max-width: 960px;
  display: block;
  margin: 0 auto;
  width: 100%;
}

/* Title */
.ft-title {
  font-size: 36px;
  margin: 0 0 30px 0;
}

/* Paragraph */
.ft-p {
  font-size: 16px;
  line-height: 1.7;
  margin: 0;
}

.ft-p--tile { font-size: 12px; }

/* Label */
.ft-label {
  text-transform: uppercase;
  font-weight: bold;
  font-size: 12px;
}

/* Button */
.ft-button {
  text-transform: uppercase;
  color: #FFFFFF;
  font-weight: bold;
  background-color: rgba(0, 0, 0, 0.5);
  border: 1px solid #FFFFFF;
  border-radius: 20px;
  padding: 10px 35px;
  text-align: center;
  cursor: pointer;
  text-decoration: none;
  outline: none;
  white-space: nowrap;
}

/* Tile*/
.ft-tile {
  position: relative;
  padding: 20px 25px;
  border-radius: 3px;
  margin: 10px 0;
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
  box-sizing: border-box;
  text-decoration: none;
  color: #FFFFFF;
}

.ft-tile--featured { height: 360px; }
.ft-tile--1 { background-image: url('assets/tile-1.jpg'); }
.ft-tile--2 { background-image: url('assets/tile-2.jpg'); }
.ft-tile--fb { background-color: #3B5998; }
.ft-tile--yt { background-color: #CD201F; }

.ft-tile-mask {
  position: absolute;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.2);
  left: 0;
  top: 0;
  border-radius: 3px;
}

.ft-tile-category {
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: rgba(0, 0, 0, 0.5);
  text-align: center;
  border-radius: 20px;
  padding: 5px 10px;
  display: inline-block;
  font-size: 12px;
}

.ft-tile-footer {
  position: absolute;
  bottom: 20px;
  left: 20px;
  width: calc(100% - 40px);
}

.ft-tile-title {
  font-size: 22px;
  margin: 0 0 10px 0;
}

/* FLEX */
/* I have come to really like using flexbox for it's versatility. Especially when it comes to responsivity. The technique I
typically use is to have "surgical-like" flexbox classes which I can re-use. E.g. ft-flex--column, ft-flex--justify-around, etc.
Unless the flexbox layout makes sense to be integrated in the component, I would typically use these custom flex classes for
general page layout, or edge cases. I should also note that I would usually have more to include the remaining flexbox behaviours,
but have removed those to reduce bloat. */
.ft-flex {
  display: flex;
  flex: 1;
}

.ft-flex--column { flex-direction: column; }
.ft-flex--justify-around { justify-content: space-around; }
.ft-flex--align-center { align-items: center; }

/* SURGICAL */
/* While I tend to avoid too many surgical classes, there are a few that I find extremely helpful. Particularly content-box
modifier classes. E.g. mts (margin top small) plm (padding left medium) man (margin all none). These semantic value (small -
large) can be set to values that make sense for the generaly layout of the app you are building. In addition having very simple
but commonly used surgical classes like "hidden" I find are extremely useful, especially when it comes to responsive edge
cases. */
.ft-mtl { margin-top: 30px; }
.ft-hidden { display: none !important; }

/* RESPONSIVE */
@media (min-width: 670px) {
  .ft-header {
    justify-content: space-between;
    top: 0;
  }
  .ft-header-nav { max-width: 340px; }
  .ft-header-logo { margin-right: 10px; }

  .ft-section--hero {
    justify-content: center;
    text-align: center;
  }

  .ft-tile { max-width: calc((960px / 2) - 15px); }
  .ft-tile--featured { height: initial; }
  .ft-tile--res-featured { min-height: 480px; }

  .ft-flex--res-row { flex-direction: row; }

  /* SURGICAL */
  .ft-res--ib { display: inline-block; }
  .ft-res--hidden { display: none; }
  .ft-res-half { width: 50%; }
  .ft-res-half-h { height: 50%; }
  .ft-res-mrm { margin-right: 15px; }
  .ft-res-mlm { margin-left: 15px; }
}
